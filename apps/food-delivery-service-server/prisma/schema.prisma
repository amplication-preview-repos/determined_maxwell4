datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Customer {
  createdAt      DateTime @default(now())
  customerId     Int?
  favorites      Json?
  id             String   @id @default(cuid())
  loyaltyPoints  Int?
  orderHistory   Json?
  paymentMethods Json?
  updatedAt      DateTime @updatedAt
  userId         Int?
}

model Driver {
  availabilityStatus EnumDriverAvailabilityStatus?
  createdAt          DateTime                      @default(now())
  currentLocation    Json?
  driverId           Int?
  earnings           Int?
  id                 String                        @id @default(cuid())
  orderHistory       Json?
  ratings            Int?
  updatedAt          DateTime                      @updatedAt
  userId             Int?
  vehicleDetails     Json?
}

model Category {
  categoryId  Int?
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(cuid())
  imageUrl    Json?
  name        String?
  updatedAt   DateTime @updatedAt
}

model Role {
  createdAt   DateTime @default(now())
  id          String   @id @default(cuid())
  permissions Json?
  roleId      Int?
  roleName    String?
  updatedAt   DateTime @updatedAt
}

model Menu {
  createdAt    DateTime @default(now())
  id           String   @id @default(cuid())
  menuId       Int?
  menuItems    Json?
  restaurantId Int?
  updatedAt    DateTime @updatedAt
}

model Permission {
  createdAt      DateTime @default(now())
  description    String?
  id             String   @id @default(cuid())
  permissionId   Int?
  permissionName String?
  updatedAt      DateTime @updatedAt
}

model Admin {
  adminId     Int?
  createdAt   DateTime @default(now())
  id          String   @id @default(cuid())
  permissions Json?
  role        String?
  updatedAt   DateTime @updatedAt
  userId      Int?
}

model OrderItem {
  createdAt           DateTime @default(now())
  id                  String   @id @default(cuid())
  menuItemId          Int?
  orderId             Int?
  orderItemId         Int?
  price               Float?
  quantity            Int?
  specialInstructions String?
  updatedAt           DateTime @updatedAt
}

model Restaurant {
  address        String?
  createdAt      DateTime @default(now())
  id             String   @id @default(cuid())
  menuId         Int?
  operatingHours Json?
  orderHistory   Json?
  phoneNumber    String?
  ratings        Int?
  restaurantId   Int?
  restaurantName String?
  updatedAt      DateTime @updatedAt
  userId         Int?
}

model Order {
  createdAt       DateTime                @default(now())
  customerId      Int?
  deliveryAddress String?
  driverId        Int?
  id              String                  @id @default(cuid())
  orderId         Int?
  orderStatus     EnumOrderOrderStatus?
  paymentStatus   EnumOrderPaymentStatus?
  restaurantId    Int?
  totalPrice      Float?
  updatedAt       DateTime                @updatedAt
}

model Vehicle {
  color            String?
  createdAt        DateTime @default(now())
  driverId         Int?
  id               String   @id @default(cuid())
  licensePlate     String?
  model            String?
  registrationYear Int?
  updatedAt        DateTime @updatedAt
  vehicleId        Int?
  vehicleType      String?
}

model Transaction {
  amount          Float?
  createdAt       DateTime  @default(now())
  customerId      Int?
  id              String    @id @default(cuid())
  orderId         Int?
  paymentId       Int?
  paymentMethod   String?
  transactionDate DateTime?
  transactionId   Int?
  updatedAt       DateTime  @updatedAt
}

model Location {
  address    String?
  createdAt  DateTime  @default(now())
  id         String    @id @default(cuid())
  latitude   Float?
  locationId Int?
  longitude  Float?
  timestamp  DateTime?
  updatedAt  DateTime  @updatedAt
  userId     Int?
}

model Notification {
  createdAt      DateTime                   @default(now())
  id             String                     @id @default(cuid())
  message        String?
  notificationId Int?
  readStatus     Boolean?
  typeField      EnumNotificationTypeField?
  updatedAt      DateTime                   @updatedAt
  userId         Int?
}

model Review {
  comment      String?
  createdAt    DateTime @default(now())
  customerId   Int?
  driverId     Int?
  id           String   @id @default(cuid())
  orderId      Int?
  rating       Int?
  restaurantId Int?
  reviewId     Int?
  updatedAt    DateTime @updatedAt
}

model Promotion {
  activeStatus Boolean?
  createdAt    DateTime  @default(now())
  description  String?
  discount     Float?
  endDate      DateTime?
  id           String    @id @default(cuid())
  promotionId  Int?
  restaurantId Int?
  startDate    DateTime?
  title        String?
  updatedAt    DateTime  @updatedAt
}

model Payment {
  amount          Float?
  createdAt       DateTime                  @default(now())
  customerId      Int?
  id              String                    @id @default(cuid())
  orderId         Int?
  paymentId       Int?
  paymentMethod   String?
  paymentStatus   EnumPaymentPaymentStatus?
  transactionDate DateTime?
  updatedAt       DateTime                  @updatedAt
}

model MenuItem {
  availabilityStatus EnumMenuItemAvailabilityStatus?
  category           String?
  createdAt          DateTime                        @default(now())
  description        String?
  id                 String                          @id @default(cuid())
  imageUrl           Json?
  menuId             Int?
  menuItemId         Int?
  name               String?
  price              Float?
  updatedAt          DateTime                        @updatedAt
}

model User {
  address        String?
  createdAt      DateTime          @default(now())
  email          String?           @unique
  firstName      String?
  id             String            @id @default(cuid())
  lastName       String?
  name           String?
  password       String
  phoneNumber    String?
  profilePicture Json?
  roles          Json
  updatedAt      DateTime          @updatedAt
  userId         Int?
  userType       EnumUserUserType?
  username       String            @unique
}

enum EnumDriverAvailabilityStatus {
  Option1
}

enum EnumOrderOrderStatus {
  Option1
}

enum EnumOrderPaymentStatus {
  Option1
}

enum EnumNotificationTypeField {
  Option1
}

enum EnumPaymentPaymentStatus {
  Option1
}

enum EnumMenuItemAvailabilityStatus {
  Option1
}

enum EnumUserUserType {
  Option1
}
